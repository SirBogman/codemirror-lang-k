@top Program { exprs* }
@skip { space }
exprs {
  noun |
  verb |
  adverb |
  Delimiter |
  exprs SquareBrackets { "[" exprs* "]" } |
  Parentheses { "(" exprs* ")" } |
  Function { "{" exprs* "}" } |
  Comment |
  MultilineComment |
  MultilineCommentToEOF
}
verb { Verb | Minus }
adverb { Adverb | Backslash | Slash }
noun { Name | Number | String | Symbol }
@tokens {
  Delimiter { ";" }
  Adverb { "'" | "':" }
  Verb { Verb1 | Verb1 ":" }
  Verb1 { ":" | "+" | "*" | "%" | "!" | "&" | "|" | "<" | ">" | "=" | "~" | "," | "^" | "#" | "_" | "$" | "?" | "@" | "." | @digit ":" }
  Name { Name1 "." Name | Name1 }
  Name1 { @asciiLetter (@asciiLetter | @digit)* }
  String { '"' (!["\\\n] | "\n " | "\\" _)* '"' | HexString }
  HexString { "0x" Bytes }
  Bytes { HexDigit HexDigit Bytes | "" }
  Symbol { "`" | "`" (Name | String | MultibyteChar) }
  // Upper range of multibyte char should be \u{10ffff}, but test cases fail for 4 byte UTF-8 codepoints.
  MultibyteChar { $[\u{80}-\u{10fffe}] }
  HexDigit { @digit | $[a-f] }
  space { $[ \t\n\r]+ }
  "(" ")"
  "[" "]"
  "{" "}"
}
@external tokens slashOrComment from "./tokens" { Comment, MultilineComment, Slash }
@external tokens backslashOrMultilineCommentToEOF from "./tokens" { Backslash, MultilineCommentToEOF }
@external tokens minusOrNumber from "./tokens" { Minus, Number }
@detectDelim
